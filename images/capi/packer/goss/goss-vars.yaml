---
common_rpms: &common_rpms
  ca-certificates:
  conntrack-tools:
  chrony:
  curl:
  ebtables:
  jq:
  open-vm-tools:
  python-netifaces:
  python-requests:
  socat:
  yum-utils:

common_debs: &common_debs
  auditd:
  apt-transport-https:
  conntrack:
  chrony:
  curl:
  ebtables:
  jq:
  gnupg:
  libnetfilter-acct1:
  libnetfilter-cttimeout1:
  libnetfilter-log1:
  linux-cloud-tools-virtual:
  linux-tools-virtual:
  python3-distutils:
  python3-netifaces:
  python3-pip:
  socat:

chrony_deb: &chrony_deb
  chrony:
  ntp:
    skip: true
    installed: false


common_photon_rpms: &common_photon_rpms
  audit:
  conntrack-tools:
  chrony:
  distrib-compat:
  ebtables:
  jq:
  net-tools:
  openssl-c_rehash:
  python-netifaces:
  python3-pip:
  python-requests:
  rng-tools:
  socat:
  tar:
  unzip:

arch: "amd64"
containerd_version: ""
kubernetes_cni_source_type: ""
kubernetes_cni_version: ""
kubernetes_source_type: ""
kubernetes_version: ""
kubernetes_rpm_version: ""
kubernetes_deb_version: ""
kubernetes_cni_deb_version: ""
kubernetes_cni_rpm_version: ""
# When k8s and k8s cni source is http
kubernetes_load_additional_imgs: false

#windows variables
kubernetes_install_path: ""
windows_service_manager: ""
distribution_version: ""
runtime: ""

# OS Specific package/Command/Kernal Params etc...
# Structured in below format
# OS_NAME
#   common-package:
#   common-kernel-params:
#   common-services:
#   PROVIDER_NAME:
#     package:
#     command:
#     service:
#  ...
amazon linux:
  common-package: *common_rpms
  amazon:
    service:
      amazon-ssm-agent:
        enabled: true
        running: true
    package:
      awscli:
      amazon-ssm-agent:
centos:
  common-package: *common_rpms
  amazon:
    package:
      amazon-ssm-agent:
    command:
      pip3 list --format=columns | grep 'awscli' | awk -F' ' '{print $1}':
        exit-status: 0
        stdout: ["awscli"]
        stderr: []
        timeout: 0
  azure:
    package:
      azure-cli:
  ova:
    package:
      open-vm-tools:
      cloud-init:
      cloud-utils-growpart:
      python2-pip:
  qemu:
    package:
      cloud-init:
      cloud-utils-growpart:
      python2-pip:
flatcar:
  amazon:
    command:
photon:
  common-kernel-param:
    net.ipv4.tcp_limit_output_bytes:
      value: "524288"
  common-package:
    <<: *common_photon_rpms
    audit:
  ova:
    package:
      open-vm-tools:
      cloud-init:
      cloud-utils:
      python3-netifaces:
  qemu:
    package:
      cloud-init:
      cloud-utils:
      python3-netifaces:
rhel:
  common-package: *common_rpms
  ova:
    package:
      open-vm-tools:
      cloud-init:
      cloud-utils-growpart:
      python2-pip:
  qemu:
    package:
      cloud-init:
      cloud-utils-growpart:
      python2-pip:
ubuntu:
  common-kernel-param:
    net.ipv4.conf.all.rp_filter:
      value: "1"
  common-package:
    <<: *common_debs
  common-service:
    apt-daily.timer:
      enabled: false
      running: false
    apt-daily-upgrade.timer:
      enabled: false
      running: false
  azure:
    command:
      pip3 list --format=columns | grep 'azure-cli' | awk -F' ' '{print $1}':
        exit-status: 0
        stdout: ["azure-cli"]
        stderr: []
        timeout: 0
    package:
      <<: *chrony_deb
    service:
      chrony:
        enabled: true
        running: true
  amazon:
    service:
      snap.amazon-ssm-agent.amazon-ssm-agent.service:
        enabled: true
        running: true
    package:
    command:
      snap list | grep 'amazon-ssm-agent' | awk -F' ' '{print $1}':
        exit-status: 0
        stdout: ["amazon-ssm-agent"]
        stderr: []
        timeout: 0
      pip3 list --format=columns | grep 'awscli' | awk -F' ' '{print $1}':
        exit-status: 0
        stdout: ["awscli"]
        stderr: []
        timeout: 0
  ova:
    package:
      open-vm-tools:
      cloud-guest-utils:
      cloud-initramfs-copymods:
      cloud-initramfs-dyn-netconf:
  qemu:
    package:
      cloud-guest-utils:
      cloud-initramfs-copymods:
      cloud-initramfs-dyn-netconf:
# Windows specific variables
windows:
  common-windows-features:
    Hyper-V-PowerShell:
      expected:
      - Installed
    Containers:
      expected:
      - Installed

  common-files:
    c:/etc/kubernetes/pki:
      exists: true
      filetype: directory
      contains:
    c:/var/lib/kubelet/etc/kubernetes:
      exists: true
      filetype: directory
      contains:
    c:/var/lib/kubelet/etc/kubernetes/manifests:
      exists: true
      filetype: directory
      contains:
    c:/var/log/kubelet:
      exists: true
      filetype: directory
      contains:

  common-windows-service:
    cloudbase-init:
      expected:
      - Manual
      - Stopped
    kubelet:
      expected: 
      - Manual 
      - Stopped
      - "/RequiredServices.+:.+(containerd|docker)/"
    sshd:
      expected:
      - Automatic
      - Running

  azure:
    windows-service:

    files: 
      'c:/program files/Cloudbase Solutions/Cloudbase-init/conf/cloudbase-init.conf': 
        exists: true
        filetype: file
        contains:
        - "COM1,115200,N,8"
        - "metadata_services=cloudbaseinit.metadata.services.azureservice.AzureService"
        - "cloudbaseinit.plugins.common.ephemeraldisk.EphemeralDiskPlugin"
        - "cloudbaseinit.plugins.windows.azureguestagent.AzureGuestAgentPlugin"
        - "cloudbaseinit.plugins.common.mtu.MTUPlugin"
        - "cloudbaseinit.plugins.common.sethostname.SetHostNamePlugin"
  ova:
    windows-service:
      vmtools:
        expected: 
        - Automatic 
        - Running
    files:
      'c:/program files/Cloudbase Solutions/Cloudbase-init/conf/cloudbase-init.conf': 
        exists: true
        filetype: file
        contains:
        - "!/logging_serial_port=COM1,115200,N,8/"
        - "cloudbaseinit.metadata.services.vmwareguestinfoservice.VMwareGuestInfoService"
        - "cloudbaseinit.plugins.common.ephemeraldisk.EphemeralDiskPlugin"
        - "cloudbaseinit.plugins.common.mtu.MTUPlugin"
        - "cloudbaseinit.plugins.common.sethostname.SetHostNamePlugin"
        - "cloudbaseinit.plugins.common.sshpublickeys.SetUserSSHPublicKeysPlugin"
        - "cloudbaseinit.plugins.common.userdata.UserDataPlugin"
        - "cloudbaseinit.plugins.common.localscripts.LocalScriptsPlugin"
        - "cloudbaseinit.plugins.windows.createuser.CreateUserPlugin"
        - "cloudbaseinit.plugins.windows.extendvolumes.ExtendVolumesPlugin"
      'c:/program files/Cloudbase Solutions/Cloudbase-init/conf/cloudbase-init-unattend.conf': 
        exists: true
        filetype: file
        contains:
        - "metadata_services=cloudbaseinit.metadata.services.vmwareguestinfoservice.VMwareGuestInfoService"
  amazon:
    windows-service:

    files:
      'c:/program files/Cloudbase Solutions/Cloudbase-init/conf/cloudbase-init.conf': 
        exists: true
        filetype: file
        contains:
        - "!/logging_serial_port=COM1,115200,N,8/"
        - "metadata_services=cloudbaseinit.metadata.services.ec2service.EC2Service"
        - "cloudbaseinit.plugins.common.ephemeraldisk.EphemeralDiskPlugin"
        - "cloudbaseinit.plugins.common.mtu.MTUPlugin"
        - "cloudbaseinit.plugins.common.sethostname.SetHostNamePlugin"
  